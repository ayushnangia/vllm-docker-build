name: Build vLLM Docker (NVIDIA)

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: "How many commits per run"
        required: true
        default: "10"
      max_parallel:
        description: "How many concurrent builds"
        required: true
        default: "1"

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    outputs:
      commits: ${{ steps.select.outputs.commits }}
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq
      - name: Fetch existing Docker Hub tags
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          set -euo pipefail
          REPO="${DOCKERHUB_USERNAME}/nvidia-vllm-docker"
          URL="https://hub.docker.com/v2/repositories/${REPO}/tags?page_size=100"
          : > tags.txt
          while [ -n "$URL" ] && [ "$URL" != "null" ]; do
            echo "Fetching: $URL" 1>&2
            RESP=$(curl -fsSL "$URL")
            echo "$RESP" | jq -r '.results[].name' >> tags.txt
            URL=$(echo "$RESP" | jq -r '.next')
          done
          sort -u tags.txt -o tags.txt
      - name: Select commits
        id: select
        run: |
          set -euo pipefail
          mapfile -t BLACKLIST < <(grep -Eo '^[a-f0-9]+' blacklist.txt 2>/dev/null || true)
          BLACKLIST_RE=$(printf '|%s' "${BLACKLIST[@]}" | cut -c2- || true)
          if [ -n "$BLACKLIST_RE" ]; then
            FILTER="select(.Dockerfile != null and (.commit | test(\"^(${BLACKLIST_RE})$\") | not)) | .commit"
          else
            FILTER="select(.Dockerfile != null) | .commit"
          fi
          COMMITS=$(jq -r "$FILTER" nvidia-vllm-docker.jsonl)
          if [ -s tags.txt ]; then
            COMMITS=$(printf '%s\n' "$COMMITS" | grep -Fxv -f tags.txt || true)
          fi
          COMMITS=$(printf '%s\n' "$COMMITS" | head -n "${{ github.event.inputs.batch_size }}")
          JSON=$(printf '%s\n' "$COMMITS" | jq -R -s -c 'split("\n") | map(select(length>0))')
          echo "commits=$JSON" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      max-parallel: ${{ fromJSON(inputs.max_parallel) }}
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.prepare.outputs.commits) }}
    env:
      IMAGE_NAME: nvidia-vllm-docker
    steps:
      - uses: actions/checkout@v4
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          overprovision-lvm: true
      - name: Aggressive cleanup for free space
        run: |
          set -euxo pipefail
          echo "Before cleanup:"; df -h /
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /opt/hostedtoolcache || true
          docker system prune -af || true
          docker builder prune -af || true
          echo "After cleanup:"; df -h /
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install git and jq
        run: sudo apt-get update -y && sudo apt-get install -y git jq
      - name: Clone vLLM
        run: |
          if [ ! -d vllm ]; then git clone https://github.com/vllm-project/vllm.git; fi
      - name: Build and push
        run: |
          set -e
          COMMIT="${{ matrix.commit }}"
          echo "==> $COMMIT"
          git -C vllm fetch --all --tags --prune
          if ! git -C vllm checkout -q "$COMMIT"; then echo "skip $COMMIT (checkout failed)"; exit 0; fi
          DF=vllm/docker/Dockerfile; [ -f "$DF" ] || DF=vllm/Dockerfile
          if [ ! -f "$DF" ]; then echo "skip $COMMIT (no Dockerfile)"; exit 0; fi
          docker buildx build \
            --platform linux/amd64 \
            --file "$DF" \
            --tag "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$COMMIT" \
            --label "org.opencontainers.image.revision=$COMMIT" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            vllm
